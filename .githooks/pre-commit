#!/bin/bash
#
# Pre-commit hook for GoMail project
# Performs security scanning and checks for sensitive data
#

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}Running pre-commit security checks...${NC}"

# Check for common secret patterns in staged files
check_secrets() {
    echo -e "${YELLOW}Checking for secrets in staged files...${NC}"
    
    # Get list of staged files
    FILES=$(git diff --cached --name-only)
    
    for FILE in $FILES; do
        if [ -f "$FILE" ]; then
            # Check for various token patterns
            if grep -qE 'dop_v1_[a-f0-9]{64}' "$FILE"; then
                echo -e "${RED}ERROR: DigitalOcean token found in $FILE${NC}"
                exit 1
            fi
            
            if grep -qE 'DO_TOKEN|DO_API_TOKEN|DIGITALOCEAN_TOKEN' "$FILE"; then
                # Check if it's not just a variable name but has a value
                if grep -qE '(DO_TOKEN|DO_API_TOKEN|DIGITALOCEAN_TOKEN)\s*=\s*["\x27]?dop_' "$FILE"; then
                    echo -e "${RED}ERROR: DigitalOcean token assignment found in $FILE${NC}"
                    exit 1
                fi
            fi
            
            # Check for AWS keys
            if grep -qE 'AKIA[0-9A-Z]{16}' "$FILE"; then
                echo -e "${RED}ERROR: AWS Access Key found in $FILE${NC}"
                exit 1
            fi
            
            # Check for generic API keys/tokens (base64 encoded strings that look like tokens)
            if grep -qE 'api[_-]?key\s*=\s*["\x27]?[A-Za-z0-9+/]{32,}={0,2}["\x27]?' "$FILE"; then
                echo -e "${YELLOW}WARNING: Possible API key found in $FILE - please review${NC}"
            fi
            
            # Check for private keys
            if grep -qE 'BEGIN (RSA |DSA |EC |OPENSSH )?PRIVATE KEY' "$FILE"; then
                echo -e "${RED}ERROR: Private key found in $FILE${NC}"
                exit 1
            fi
        fi
    done
}

# Check for files that should never be committed
check_forbidden_files() {
    echo -e "${YELLOW}Checking for forbidden files...${NC}"
    
    FORBIDDEN_PATTERNS=(
        "run-test.sh"
        "test-droplet-access.txt"
        "*-access.txt"
        "*.token"
        ".env"
        ".env.*"
    )
    
    for PATTERN in "${FORBIDDEN_PATTERNS[@]}"; do
        if git diff --cached --name-only | grep -q "$PATTERN"; then
            echo -e "${RED}ERROR: Attempting to commit forbidden file matching pattern: $PATTERN${NC}"
            echo -e "${RED}These files should be in .gitignore${NC}"
            exit 1
        fi
    done
}

# Run gitleaks if available
run_gitleaks() {
    if command -v gitleaks &> /dev/null; then
        echo -e "${YELLOW}Running gitleaks...${NC}"
        if ! gitleaks protect --staged --verbose; then
            echo -e "${RED}ERROR: gitleaks found secrets in staged files${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}gitleaks not found - install with: go install github.com/gitleaks/gitleaks/v8/cmd/gitleaks@latest${NC}"
    fi
}

# Run trufflehog if available  
run_trufflehog() {
    if command -v trufflehog &> /dev/null; then
        echo -e "${YELLOW}Running trufflehog...${NC}"
        if ! trufflehog git file://. --since-commit HEAD --only-verified --fail; then
            echo -e "${RED}ERROR: trufflehog found secrets${NC}"
            exit 1
        fi
    fi
}

# Main execution
check_secrets
check_forbidden_files
run_gitleaks

# If we're in a Go project, run additional Go-specific checks
if [ -f "go.mod" ]; then
    echo -e "${YELLOW}Running Go security checks...${NC}"
    
    # Run gosec on staged Go files
    STAGED_GO_FILES=$(git diff --cached --name-only | grep '\.go$' || true)
    if [ -n "$STAGED_GO_FILES" ]; then
        if command -v gosec &> /dev/null; then
            echo -e "${YELLOW}Running gosec on staged Go files...${NC}"
            # Run gosec but only fail on high severity issues for secrets
            if ! gosec -severity high -quiet -fmt json $STAGED_GO_FILES 2>/dev/null | grep -q '"Cwe": "798"'; then
                : # No hardcoded secrets found
            else
                echo -e "${RED}ERROR: gosec found hardcoded secrets${NC}"
                exit 1
            fi
        fi
    fi
fi

echo -e "${GREEN}âœ“ All security checks passed${NC}"